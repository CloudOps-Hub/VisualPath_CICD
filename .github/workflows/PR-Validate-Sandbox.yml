name: PR-Validate-Sandbox
run-name: "PR Validation - Sandbox"

on:
  workflow_dispatch:
    inputs:
      base:
        description: "Please enter base branch (sandbox branch)"
        required: true
      head:
        description: "Please enter head branch name."
        required: true
      sandbox:
        description: "In which Sandbox do you want to validate?"
        required: true
        type: choice
        options:
          - test
          - qa
          - uat
        default: NONE
  pull_request:
    types: [opened, synchronize, edited, reopened, ready_for_review]
    branches: [test, uat]
    paths:
      - "force-app/**"
  issue_comment:
    types: [created]

env:
  HTTP_PROXY: "xx"
  HTTPS_PROXY: "xx"
  NO_PROXY: ""
  TESTLEVEL: RunLocalTests
  TESTCLASSES: all

jobs:
  check-comment:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request
    outputs:
      should_run_tests: ${{ steps.filter_comment.outputs.should_run_tests }}
      pr_number: ${{ steps.filter_comment.outputs.pr_number }}
      base_ref: ${{ steps.filter_comment.outputs.base_ref }}
      head_ref: ${{ steps.filter_comment.outputs.head_ref }}
    steps:
      - name: Filter Comment for Test Commands
        id: filter_comment
        shell: bash
        run: |
          set +e  # prevent job from failing if command exits non-zero
          comment="${{ github.event.comment.body }}"
          echo "Comment: $comment"

          # Check for test trigger commands
          if echo "$comment" | grep -qE "^/(run-tests|run-all-tests|run-affected-tests)"; then
            echo "should_run_tests=true" >> $GITHUB_OUTPUT
            echo "✅ Test command detected: proceeding with validation"
          else
            echo "should_run_tests=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No test command found. Exiting gracefully."
            exit 0
          fi

          # Extract test class names (if any)
          if [[ "$comment" =~ ^/run-tests ]]; then
            test_classes=$(echo "$comment" | sed -E 's#^/run-tests[[:space:]]*##')
            echo "test_classes=$test_classes" >> $GITHUB_OUTPUT
            echo "Detected test classes: $test_classes"
          fi

          pr_number="${{ github.event.issue.number }}"
          echo "pr_number=$pr_number" >> $GITHUB_OUTPUT

          echo "Fetching PR details from GitHub API..."
          pr_data=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number")

          base_ref=$(echo "$pr_data" | jq -r '.base.ref')
          head_ref=$(echo "$pr_data" | jq -r '.head.ref')

          echo "base_ref=$base_ref" >> $GITHUB_OUTPUT
          echo "head_ref=$head_ref" >> $GITHUB_OUTPUT
          echo "✅ Base: $base_ref | Head: $head_ref"

  setup-environment:
    runs-on: ubuntu-latest
    needs: check-comment
    if: always() && (github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' || needs.check-comment.outputs.should_run_tests == 'true')
    outputs:
      environment_name: ${{ steps.set_env.outputs.environment_name }}
    steps:
      - name: Set Environment
        id: set_env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment_name=${{ github.event.inputs.sandbox }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "environment_name=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "environment_name=${{ needs.check-comment.outputs.base_ref }}" >> $GITHUB_OUTPUT
          fi

  validate-deployment:
    runs-on: ubuntu-latest
    needs: [setup-environment, check-comment]
    if: always() && (github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' || needs.check-comment.outputs.should_run_tests == 'true')
    environment: ${{ needs.setup-environment.outputs.environment_name }}
    #container:
      #image: docker.nexus.nee.com/salesforce/cli:latest-full
      #options: --user root
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Salesforce CLI
        run: npm install -g @salesforce/cli

      - name: Install sfdx-git-delta Plugin
        run: echo "y" | sf plugins install sfdx-git-delta

      # 🔹 Extract test classes from PR comment or body
      - name: Extract Test Classes from Comment or PR Body
        run: |
          node .github/scripts/parser.js
          echo "Extracted tests:"
          cat .github/scripts/testsToRun.txt
        continue-on-error: false

      - name: Read Extracted Test Classes
        id: read-tests
        run: |
          tests=$(cat .github/scripts/testsToRun.txt)
          echo "TESTCLASSES=$tests" >> $GITHUB_ENV
          if [ "$tests" = "all" ]; then
            echo "TESTLEVEL=RunLocalTests" >> $GITHUB_ENV
          else
            echo "TESTLEVEL=RunSpecifiedTests" >> $GITHUB_ENV
          fi

      - name: Create server.key from secret
        run: |
          mkdir -p assets
          echo "${{ secrets.JWT_KEY }}" | base64 --decode > assets/server.key

      - name: Authenticate Salesforce Org
        run: |
          sf org login jwt \
            --client-id ${{ secrets.CLIENT_ID }} \
            --jwt-key-file assets/server.key \
            --username ${{ secrets.SF_USERNAME_UAT }} \
            --instance-url https://login.salesforce.com \
            --alias HUH

      - name: Generate the package.xml for delta files
        id: generate-delta-files
        run: |
          mkdir delta
          sf sgd source delta --to "HEAD" --from "HEAD~1" \
            --output "./delta" --ignore-whitespace -d -i .sgdignore
          echo "--- package.xml generated with added and modified metadata ---"
          cat delta/package/package.xml || echo "No package.xml generated"

      - name: Validate components to Salesforce
        id: validate-pull-request-components
        run: |
          sf project deploy validate \
            --manifest delta/package/package.xml \
            --test-level ${{ env.TESTLEVEL }} \
            --tests ${{ env.TESTCLASSES }} \
            --target-org HUH \
            --coverage-formatters clover
