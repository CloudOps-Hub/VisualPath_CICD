name: PR-Validate-Sandbox
run-name: "PR Validation for Sandbox"

on:
  workflow_dispatch:
    inputs:
      base:
        description: "Please enter base branch (sandbox branch)"
        required: true
      head:
        description: "Please enter head branch name."
        required: true
      sandbox:
        description: "Select Sandbox to validate in"
        required: true
        type: choice
        options:
          - test
          - qa
          - uat
        default: test

  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, qa, uat]
    paths:
      - "force-app/**"

  issue_comment:
    types: [created, edited]

env:
  HTTP_PROXY: "xx"
  HTTPS_PROXY: "xx"
  NO_PROXY: ""

jobs:
  #########################################################################
  # 1️⃣ Check Comments - Detect Test Commands
  #########################################################################
  check-comment:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request
    outputs:
      should_run_tests: ${{ steps.filter_comment.outputs.should_run_tests }}
      pr_number: ${{ steps.filter_comment.outputs.pr_number }}
      base_ref: ${{ steps.filter_comment.outputs.base_ref }}
      head_ref: ${{ steps.filter_comment.outputs.head_ref }}
      test_classes: ${{ steps.filter_comment.outputs.test_classes }}
    steps:
      - name: Filter Comment for Test Commands
        id: filter_comment
        shell: bash
        run: |
          set +e  # prevent job from failing if command exits non-zero
          comment="${{ github.event.comment.body }}"
          echo "Comment: $comment"

          # Check for test trigger commands
          if echo "$comment" | grep -qE "^/(run-tests|run-all-tests|run-affected-tests)"; then
            echo "should_run_tests=true" >> $GITHUB_OUTPUT
            echo "✅ Test command detected: proceeding with validation"
          else
            echo "should_run_tests=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No test command found. Exiting gracefully."
            exit 0
          fi

          # Extract test class names (if any)
          if [[ "$comment" =~ ^/run-tests ]]; then
            test_classes=$(echo "$comment" | sed -E 's#^/run-tests[[:space:]]*##')
            echo "test_classes=$test_classes" >> $GITHUB_OUTPUT
            echo "Detected test classes: $test_classes"
          fi

          pr_number="${{ github.event.issue.number }}"
          echo "pr_number=$pr_number" >> $GITHUB_OUTPUT

          echo "Fetching PR details from GitHub API..."
          pr_data=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number")

          base_ref=$(echo "$pr_data" | jq -r '.base.ref')
          head_ref=$(echo "$pr_data" | jq -r '.head.ref')

          echo "base_ref=$base_ref" >> $GITHUB_OUTPUT
          echo "head_ref=$head_ref" >> $GITHUB_OUTPUT
          echo "✅ Base: $base_ref | Head: $head_ref"

  #########################################################################
  # 2️⃣ Setup Environment
  #########################################################################
  setup-environment:
    runs-on: ubuntu-latest
    needs: [check-comment]
    if: always() && (github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' || needs.check-comment.outputs.should_run_tests == 'true')
    outputs:
      environment_name: ${{ steps.set_env.outputs.environment_name }}

    steps:
      - name: Set Environment
        id: set_env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment_name=${{ github.event.inputs.sandbox }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "environment_name=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "environment_name=${{ needs.check-comment.outputs.base_ref }}" >> $GITHUB_OUTPUT
          fi

  #########################################################################
  # 3️⃣ Validate Deployment and Run Tests
  #########################################################################
  validation-on-sandbox:
    runs-on: ubuntu-latest
    needs: [setup-environment, check-comment]
    if: always() && (github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' || needs.check-comment.outputs.should_run_tests == 'true')
    environment: ${{ needs.setup-environment.outputs.environment_name }}
    #container:
      #image: docker.nexus.nee.com/salesforce/cli:latest-full
      #options: --user root

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --system --add safe.directory "$GITHUB_WORKSPACE"
          git config --local user.name "Salesforce DevOps"
          git config --local user.email "salesforce-devops@users.noreply.github.com"

      - name: Extract Test Classes (parser.js)
        env:
          COMMENT_BODY: ${{ github.event.comment.body || '' }}
          PR_BODY: ${{ github.event.pull_request.body || '' }}
        run: |
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "$COMMENT_BODY" > ./comment_body.txt
            node ./parser.js
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "$PR_BODY" > ./pr_body.txt
            node ./parser.js
          else
            echo "all" > ./testsToRun.txt
          fi
          TESTS=$(cat testsToRun.txt)
          echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
          echo "Selected tests: $TESTS"

      - name: Install sfdx-git-delta Plugin
        run: |
          echo y | sf plugins install sfdx-git-delta
          sf plugins

      - name: Authenticate to Sandbox Org
        run: |
          echo "${{ secrets.SFDX_AUTH_URL }}" > ./SFDX_AUTH_URL.txt
          sf org login sfdx-url -f ./SFDX_AUTH_URL.txt -a targetOrg

      - name: Create Delta Package
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            base_branch="${{ inputs.base }}"
            head_branch="${{ inputs.head }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            base_branch="${{ github.event.pull_request.base.ref }}"
            head_branch="${{ github.event.pull_request.head.ref }}"
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            base_branch="${{ needs.check-comment.outputs.base_ref }}"
            head_branch="${{ needs.check-comment.outputs.head_ref }}"
          fi

          echo "Base branch: $base_branch"
          echo "Head branch: $head_branch"

          mkdir changed-sources
          sf agd source delta --to "origin/$head_branch" --from "origin/$base_branch" -o changed-sources/ --generate-delta -f
          cd changed-sources
          ls -R

      - name: Validate Deployment
        run: |
          echo "Starting validation..."
          if [ "${{ env.APEX_TESTS }}" = "all" ]; then
            validation_output=$(sf project deploy validate --source-dir "changed-sources/force-app" --async --test-level RunLocalTests --json)
          else
            validation_output=$(sf project deploy validate --source-dir "changed-sources/force-app" --async --test-level RunSpecifiedTests --tests "${{ env.APEX_TESTS }}" --json)
          fi

          echo "Validation Output: $validation_output"
          job_id=$(echo $validation_output | jq -r '.result.id')
          echo "job_id=$job_id" >> $GITHUB_ENV
          echo $job_id > job_id.txt

          sf project deploy resume --job-id $job_id

      - name: Upload Job ID Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: job-id-artifact-${{ github.run_id }}
          path: job_id.txt
          retention-days: 5
