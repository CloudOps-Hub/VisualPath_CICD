name: Salesforce Deploy Result Winter26

on:
  pull_request:
    branches: [ develop ]

env:
  TESTLEVEL: RunSpecifiedTests
  TESTCLASSES: FirstClassTest EmpClassTest

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Salesforce CLI
        run: npm install -g @salesforce/cli

      - name: Install sfdx-git-delta Plugin
        run: echo "y" | sf plugins install sfdx-git-delta

      - name: Create server.key from secret
        run: |
          mkdir -p assets
          echo "${{ secrets.JWT_KEY }}" | base64 --decode > assets/server.key

      - name: Authenticate Salesforce Org
        run: |
          sf org login jwt \
            --client-id 3MVG9aNlkJwuH9vMFLncdqB6aFLg0Z1.vT9p4Bxa8rNnPsPI44f62E0eTlu.aLLLwW3POWVzcrkbSB2HOYGcW \
            --jwt-key-file assets/server.key \
            --username aranjithkumar0409-slfr@force.com \
            --instance-url https://login.salesforce.com \
            --alias HUH

      - name: Generate the package.xml for delta files
        id: generate-delta-files
        run: |
          mkdir delta
          sf sgd source delta --to "HEAD" --from "HEAD~1" \
            --output "./delta" --ignore-whitespace -d -i .sgdignore
          echo "--- package.xml generated with added and modified metadata ---"
          cat delta/package/package.xml || echo "No package.xml generated"
          ls delta

      - name: Deploy components to Salesforce (Async with Status Polling via Tooling API)
        id: deploy-components
        run: |
          # Start deployment async
          DEPLOY_ID=$(sf project deploy start \
            --manifest delta/package/package.xml \
            --test-level ${{ env.TESTLEVEL }} \
            --tests ${{ env.TESTCLASSES }} \
            --target-org HUH \
            --async \
            --json | jq -r '.result.id')
      
          echo "ðŸš€ Deployment started with ID: $DEPLOY_ID"
      
          # Get auth token and instance URL
          ACCESS_TOKEN=$(sf org display --target-org HUH --json | jq -r '.result.accessToken')
          INSTANCE_URL=$(sf org display --target-org HUH --json | jq -r '.result.instanceUrl')
      
          STATUS="Pending"
          LAST_STATUS=""
      
          while true; do
            RESPONSE=$(curl -s "$INSTANCE_URL/services/data/v62.0/tooling/query?q=SELECT+Id,Status,StateDetail+FROM+DeployRequest+WHERE+Id='$DEPLOY_ID'" \
              -H "Authorization: Bearer $ACCESS_TOKEN")
      
            STATUS=$(echo $RESPONSE | jq -r '.records[0].Status')
            STATE_DETAIL=$(echo $RESPONSE | jq -r '.records[0].StateDetail')
      
            if [[ "$STATUS" != "$LAST_STATUS" || "$STATE_DETAIL" != "null" ]]; then
              echo "$(date +'%Y-%m-%d %H:%M:%S') ðŸ”„ Status: $STATUS | Detail: $STATE_DETAIL"
              LAST_STATUS=$STATUS
            fi
      
            if [[ "$STATUS" == "Succeeded" || "$STATUS" == "SucceededPartial" || "$STATUS" == "Failed" || "$STATUS" == "Canceled" || "$STATUS" == "FinalizingDeployFailed" ]]; then
              break
            fi
      
            sleep 5
          done
      
          echo "âœ… Final status: $STATUS | Detail: $STATE_DETAIL"
