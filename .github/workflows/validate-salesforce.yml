name: Salesforce Delta Validation

on:
  pull_request:
    branches:
      - main
    paths:
      - 'force-app/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout full history (required for sgd)
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Install Node
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3. Install Salesforce CLI
      - name: Install Salesforce CLI
        run: npm install -g @salesforce/cli

      # 4. Install sfdx-git-delta
      - name: Install SFDX-Git-Delta Plugin
        run: echo "y" | sf plugins install sfdx-git-delta

      # 5. Create server.key from base64 secret
      - name: Create server.key
        run: |
          mkdir -p assets
          echo "${{ secrets.JWT_KEY }}" | base64 --decode > assets/server.key

      # 6. Authenticate Salesforce Org
      - name: Authenticate Salesforce Org
        run: |
          sf org login jwt \
            --client-id ${{ secrets.CLIENT_ID }} \
            --jwt-key-file assets/server.key \
            --username ${{ secrets.SF_USERNAME_UAT }} \
            --instance-url https://login.salesforce.com \
            --alias HUH

      # 7. Generate Delta Package using commit SHAs from PR
      - name: Generate Delta Package
        id: generate_delta
        run: |
          mkdir -p deploy_package

          # Get base and head commit SHAs from the PR event payload
          BASE_COMMIT=$(jq -r .pull_request.base.sha "$GITHUB_EVENT_PATH")
          HEAD_COMMIT=$(jq -r .pull_request.head.sha "$GITHUB_EVENT_PATH")

          echo "Comparing commits:"
          echo "Base: $BASE_COMMIT"
          echo "Head: $HEAD_COMMIT"

          sf sgd source delta \
            --from "$BASE_COMMIT" \
            --to "$HEAD_COMMIT" \
            --output-dir deploy_package \
            --generate-delta

          if [ ! -s deploy_package/package.xml ]; then
            echo "No changes detected. Skipping deployment."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected. Proceeding with deployment."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      # 8. Deploy Delta Components only if changes detected
      - name: Deploy Delta Components
        if: steps.generate_delta.outputs.has_changes == 'true'
        run: |
          sf project deploy start \
            --metadata-dir deploy_package \
            --post-destructive-changes deploy_package/destructiveChanges.xml \
            --test-level RunLocalTests \
            --target-org HUH \
            --wait 120 \
            --verbose
