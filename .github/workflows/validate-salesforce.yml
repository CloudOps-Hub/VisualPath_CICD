name: Salesforce PR Validation

on:
  pull_request:
    branches:
      - main
    paths:
      - 'force-app/**'
    inputs:
      TESTLEVEL:
        required: false
        type: string
      TESTCLASSES:
        required: false
        type: string

# declare the local variables that are accessible within the complete pipeline
env:
  TESTLEVEL: RunSpecifiedTests
  TESTCLASSES: ChangePasswordControllerTest

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git history and sfdx-git-delta

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Salesforce CLI
        run: npm install -g @salesforce/cli

      - name: Install sfdx-git-delta Plugin
        run: echo "y" | sf plugins install sfdx-git-delta

      - name: Create server.key from secret
        run: |
          mkdir -p assets
          echo "${{ secrets.JWT_KEY }}" | base64 --decode > assets/server.key

      - name: Authenticate Salesforce Org
        run: |
          sf org login jwt \
            --client-id ${{ secrets.CLIENT_ID }} \
            --jwt-key-file assets/server.key \
            --username ${{ secrets.SF_USERNAME_UAT }} \
            --instance-url https://login.salesforce.com \
            --alias HUH

      - name: Generate the package.xml for delta files
        id: generate-delta-files
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          mkdir delta
          sf sgd source delta --to "HEAD" --from "HEAD~1" --output "./delta" --ignore-whitespace -d -i .sgdignore
          echo "--- package.xml generated with added and modified metadata ---"
          cat delta/package/package.xml
          ls delta

      - name: Validate components to Salesforce
        id: validate-pull-request-components
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          sf project deploy validate --manifest delta/package/package.xml --test-level ${{ inputs.TESTLEVEL }} --tests ${{ inputs.TESTCLASSES }} --target-org HUH --coverage-formatters clover

      - name: Installing the SFDX CLI Scanner
        id: install-sfdx-scanner
        run: |
          echo 'y' | sf plugins install @salesforce/sfdx-scanner

      # run the security scan in all the files and store the result at reports/scan-reports.html location
      - name: Run SFDX CLI Scanner
        id: run-sfdx-scanner
        run: |
          mkdir reports
          sf scanner run -f html -t "force-app" -e "eslint,retire-js,pmd,cpd" -c "Design,Best Practices,Code Style,Performance,Security" --outfile reports/scan-reports.html
      
      # Run Apex PMD Scan
      - name: 'Run PMD scan'
        uses: pmd/pmd-github-action@v1
        id: pmd
        with:
            sourcePath: 'force-app'
            rulesets: 'ruleset.xml'
            analyzeModifiedFilesOnly: false

      # Check for PMD violations
      - name: 'Check for PMD violations'
        # if: ${{steps.pmd.outputs.violations != 0 }}
        run: |
          # exit 1
          echo "PMD Violatons ${{steps.pmd.outputs.violations}} "
          echo "PMD outputs ${{toJSON(steps.pmd.outputs)}} "
          echo "test"
      
      - name: Upload SARIF file
        # if:  ${{steps.pmd.outputs.violations != 0 }}
        
        id: upload-sarif-file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: pmd-report.sarif
      
      - uses: actions/upload-artifact@v4
        id: upload-scanner-report
        with:
          name: cli-scan-report
          path: reports/scan-reports.html

      #- name: Deploy Delta Components
       # run: |
       #   sf project deploy start --metadata-dir deploy_package --post-destructive-changes deploy_package/destructiveChanges.xml --test-level RunLocalTests --target-org HUH --wait 120 --verbose
