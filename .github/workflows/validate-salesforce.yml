name: Salesforce PR Validation

on:
  workflow_dispatch:
    #branches:
     # - main
    # paths:
     # - 'force-app/**'

env:
  TESTLEVEL: RunSpecifiedTests
  TESTCLASSES: FirstClassTest EmpClassTest

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git history and sfdx-git-delta

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Salesforce CLI
        run: npm install -g @salesforce/cli

      - name: Install sfdx-git-delta Plugin
        run: echo "y" | sf plugins install sfdx-git-delta

      - name: Create server.key from secret
        run: |
          mkdir -p assets
          echo "${{ secrets.JWT_KEY }}" | base64 --decode > assets/server.key

      - name: Authenticate Salesforce Org
        run: |
          sf org login jwt \
            --client-id ${{ secrets.CLIENT_ID }} \
            --jwt-key-file assets/server.key \
            --username ${{ secrets.SF_USERNAME_UAT }} \
            --instance-url https://login.salesforce.com \
            --alias HUH

      - name: Generate the package.xml for delta files
        id: generate-delta-files
        run: |
          mkdir delta
          sf sgd source delta --to "HEAD" --from "HEAD~1" \
            --output "./delta" --ignore-whitespace -d -i .sgdignore
          echo "--- package.xml generated with added and modified metadata ---"
          cat delta/package/package.xml || echo "No package.xml generated"
          ls delta

      - name: Validate components to Salesforce
        id: validate-pull-request-components
        run: |
          sf project deploy validate \
            --manifest delta/package/package.xml \
            --test-level ${{ env.TESTLEVEL }} \
            --tests ${{ env.TESTCLASSES }} \
            --target-org HUH \
            --coverage-formatters clover

      - name: Installing the SFDX CLI Scanner
        run: echo 'y' | sf plugins install @salesforce/sfdx-scanner

      # Run SFDX Scanner (HTML report)
      - name: Run SFDX CLI Scanner
        run: |
          mkdir reports
          sf scanner run -f html \
            -t "force-app" \
            -e "eslint,pmd,cpd" \
            -c "Design,Best Practices,Code Style,Performance,Security" \
            --outfile reports/scan-reports.html

      # Run Apex PMD Scan (SARIF report)
      - name: Run PMD scan
        uses: pmd/pmd-github-action@v2
        id: pmd
        with:
          sourcePath: 'force-app'
          rulesets: 'ruleset.xml'
          analyzeModifiedFilesOnly: true
          format: sarif
          outputFile: pmd-report.sarif

      - name: Check for PMD violations
        run: |
          echo "PMD Violations: ${{ steps.pmd.outputs.violations }}"
          if [ "${{ steps.pmd.outputs.violations }}" != "0" ]; then
            echo "PMD violations found!"
            exit 1
          fi

      - name: Upload PMD SARIF file
        if: ${{ steps.pmd.outputs.violations != '0' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: pmd-report.sarif

      - name: Upload CLI Scanner HTML report
        uses: actions/upload-artifact@v4
        with:
          name: cli-scan-report
          path: reports/scan-reports.html
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.sources=force-app
            -Dsonar.test.inclusions=**/*Test.cls
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
