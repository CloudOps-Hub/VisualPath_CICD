# .github/workflows/reusable-deploy.yml
name: Reusable Deploy & Validate

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      from_ref:
        required: true
        type: string
      to_ref:
        required: true
        type: string
      test_level:
        required: false
        type: string
        default: "RunLocalTests"
    secrets:
      JWT_KEY_BASE64:
        required: true
      # We expect org secrets for all environments to exist in the repo.
      CLIENT_ID_QA: { required: false }
      SF_USERNAME_QA: { required: false }
      CLIENT_ID_SIT: { required: false }
      SF_USERNAME_SIT: { required: false }
      CLIENT_ID_UAT: { required: false }
      SF_USERNAME_UAT: { required: false }
      CLIENT_ID_PROD: { required: false }
      SF_USERNAME_PROD: { required: false }
      SONAR_TOKEN: { required: false }
      SONAR_PROJECT_KEY: { required: false }
      SONAR_ORG: { required: false }

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.target }}   # Use GitHub Environment for approval gating
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Make scripts executable
        run: chmod +x scripts/*.sh || true

      - name: Install tools
        run: |
          source scripts/common.sh
          install_tools

      - name: Pick org secrets for target
        id: pick-secret
        run: |
          TARGET="${{ inputs.target }}"
          echo "Target: $TARGET"
          if [ "$TARGET" = "QA" ]; then
            CLIENT_ID="${{ secrets.CLIENT_ID_QA }}"
            SF_USERNAME="${{ secrets.SF_USERNAME_QA }}"
          elif [ "$TARGET" = "SIT" ]; then
            CLIENT_ID="${{ secrets.CLIENT_ID_SIT }}"
            SF_USERNAME="${{ secrets.SF_USERNAME_SIT }}"
          elif [ "$TARGET" = "UAT" ]; then
            CLIENT_ID="${{ secrets.CLIENT_ID_UAT }}"
            SF_USERNAME="${{ secrets.SF_USERNAME_UAT }}"
          elif [ "$TARGET" = "PROD" ]; then
            CLIENT_ID="${{ secrets.CLIENT_ID_PROD }}"
            SF_USERNAME="${{ secrets.SF_USERNAME_PROD }}"
          else
            echo "Unknown target: $TARGET"
            exit 1
          fi
          # export for following steps
          echo "CLIENT_ID=${CLIENT_ID}" >> $GITHUB_ENV
          echo "SF_USERNAME=${SF_USERNAME}" >> $GITHUB_ENV
          # JWT from secrets is provided as JWT_KEY_BASE64
          echo "JWT_KEY_BASE64=${{ secrets.JWT_KEY_BASE64 }}" >> $GITHUB_ENV

      - name: Authenticate to target org
        run: |
          source scripts/common.sh
          auth_org "${{ inputs.target }}"

      - name: Generate delta (from -> to)
        run: |
          source scripts/common.sh
          generate_delta "${{ inputs.from_ref }}" "${{ inputs.to_ref }}"

      - name: Validate / Deploy to target
        run: |
          source scripts/common.sh
          deploy_delta_or_full "${{ inputs.target }}" "${{ inputs.test_level }}"

      - name: Run SFDX scanner
        run: |
          source scripts/common.sh
          run_scanners

      - name: Run SonarCloud scan (optional if secrets present)
        if: ${{ secrets.SONAR_TOKEN != '' && secrets.SONAR_PROJECT_KEY != '' && secrets.SONAR_ORG != '' }}
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.sources=force-app
            -Dsonar.test.inclusions=**/*Test.cls
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Optional: run PMD action inside this reusable workflow (keeps scanning consolidated)
      - name: Run PMD via action
        uses: pmd/pmd-github-action@v2
        id: pmd
        with:
          sourcePath: 'force-app'
          rulesets: 'ruleset.xml'
          analyzeModifiedFilesOnly: true
          format: sarif
          outputFile: pmd-report.sarif

      - name: Fail on PMD violations
        run: |
          source scripts/common.sh
          fail_on_pmd_violations "${{ steps.pmd.outputs.violations }}"

      - name: Upload PMD SARIF (always)
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: pmd-report.sarif

      - name: Upload scanner report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cli-scan-report-${{ inputs.target }}
          path: reports/scan-reports.html
